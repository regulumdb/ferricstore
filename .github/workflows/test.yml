# Build the crate, run the tests, and check the code format.
name: Build and test

on:
  push:
  pull_request:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/clippy-check@v1
        continue-on-error: true
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3

    - name: Set Windows GNU
      if: matrix.os == 'windows-latest'
      run: |
        rustup set default-host x86_64-pc-windows-gnu
        rustup default stable-x86_64-pc-windows-gnu
    # Create the crate and build it. We use this instead of `cargo build`,
    # because it can help catch errors in the `Cargo.toml`.
    - name: Build the crate
      run: cargo package --verbose

    - name: Build and run tests
      run: cargo test --verbose

    - name: Check code format
      if: matrix.os == 'ubuntu-latest' # No need to do this on every OS.
      run: cargo fmt -- --check
