# Build the crate, run the tests, and check the code format.
name: Build and test

on:
  push:
  pull_request:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-and-test:
    strategy:
      matrix:
          os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2

    # Create the crate and build it. We use this instead of `cargo build`,
    # because it can help catch errors in the `Cargo.toml`.
    - name: Build the crate
      run: cargo package --verbose

    - name: Build and run tests
      run: cargo test --verbose

    - name: Check code format
      if: matrix.os == 'ubuntu-latest' # No need to do this on every OS.
      run: cargo fmt -- --check

  build-and-test-arm64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Update the cargo index (because it crashes on arm64)
      run: cargo install empty-library || true

    - uses: uraimo/run-on-arch-action@v2
      name: Run tests on arm64
      id: build
      with:
        arch: aarch64
        distro: bullseye
        dockerRunArgs: |
            --volume "${PWD}:/app" --volume "${HOME}/.cargo/registry":/root/.cargo/registry
        run: |
          apt-get update -q -y
          apt install curl git -q -y
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source "$HOME/.cargo/env"
          cd /app
          cargo test --verbose
